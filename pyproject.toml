[tool.poetry]
name = "earlysign"
version = "0.0.0" # version is dynamically provided by poetry-dynamic-versioning during builds
description = "Early signs, faster decisions. A Python library for sequential/safe testing (alpha-spending, e-processes, etc.)."
authors = ["Takeshi Teshima <takeshi.78.teshima@gmail.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/takeshi-teshima/EarlySign"
repository = "https://github.com/takeshi-teshima/EarlySign"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }

#==== Main repo dependencies ====#
[tool.poetry.dependencies]
python = ">=3.11,<4.0"
scipy = "^1.16.1"

## Extra dependencies
numpy = {version = "^2.3.2", optional = true}
matplotlib = {version = "^3.10.6", optional = true}

[tool.poetry.extras]
examples = ["matplotlib", "numpy"]

#==== Development ====#
[tool.poetry.group.dev.dependencies]
jupyter = "^1.1.1"
ipython = "^9.5.0"
pudb = "^2025.1"
pytest = "^8.4.1"
black = "^25.1.0"
mypy = "^1.17.1"

#==== Test tools ====#
[tool.black]
line-length = 88
target-version = ["py311"]
exclude = '''
/(\.|venv|\.venv|\.git|\.mypy_cache|\.pytest_cache|build|dist|\.venv)/
'''

[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
show_error_codes = true
strict = true
follow_imports = "silent"
check_untyped_defs = true
disallow_untyped_calls = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.pytest.ini_options]
addopts = "--doctest-modules --pyargs -v"
doctest_optionflags = ["NORMALIZE_WHITESPACE", "ELLIPSIS"]
testpaths = ["earlysign"]
norecursedirs = ["docs"]

#==== CI ====#
[tool.poetry.group.ci.dependencies]
pytest = "^8.4.1"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

# Simplify publishing to TestPyPI
[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/legacy/"
priority = "explicit"

[tool.poetry-dynamic-versioning]
# Enable the plugin to derive the package version from Git metadata (tags) at build time.
enable = true
vcs = "git" # Use Git for versioning
style = "pep440" # PEP 440 compliant versioning style
# Remove the "+..." local version part to avoid PyPI error
format-jinja = "{%- if distance == 0 -%}{{ base }}{%- else -%}{{ base }}.post{{ distance }}{%- endif -%}"
